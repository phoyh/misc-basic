print "Willkommen beim Matrix-Loeser!"
print
dim m(6,5)
rem m[0,0] = 0 : m[1,0] = -3 : m[2,0] = 4 : m[3,0] = 4 : m[4,0] = 5 : m[5,0] = -18
m[0,0] = -4 : m[1,0] = -1 : m[2,0] = 9 : m[3,0] = 3 : m[4,0] = 10 : m[5,0] = -41
m[0,1] = -4 : m[1,1] = 2 : m[2,1] = 5 : m[3,1] = -1 : m[4,1] = 5 : m[5,1] = -23
rem m[0,2] = -2 : m[1,2] = 3 : m[2,2] = -5 : m[3,2] = 0 : m[4,2] = 0 : m[5,2] = 15
m[0,2] = 2 : m[1,2] = 2 : m[2,2] = -10 : m[3,2] = -5 : m[4,2] = 4 : m[5,2] = 40
m[0,3] = 4 : m[1,3] = -1 : m[2,3] = -5 : m[3,3] = -5 : m[4,3] = 4 : m[5,3] = 25
m[0,4] = -5 : m[1,4] = 5 : m[2,4] = 4 : m[3,4] = 2 : m[4,4] = 3 : m[5,4] = -17

call showMatrix(ref(m))
call normalizeMatrix(ref(m))
call showMatrix(ref(m))

function r()
r = int(rand*11) - 5
endfunction

subroutine normalizeMatrix(ref(m))
for i=0 to m[?,] - 3
call normalizeRow(ref(m), i, i)
for j=i+1 to m[,?] - 1
call eliminateColumn(ref(m), i, i, j)
next j
next i
for i=m[?,] - 2 to 1 step -1
call normalizeRow(ref(m), i, i)
for j=i-1 to 0 step -1
call eliminateColumn(ref(m), i, i, j)
next j
next i
endsubroutine

subroutine eliminateColumn(ref(m), i, j, targetRow)
factor = -m[i,targetRow] / m[i,j]
for k=0 to m[?,] - 1
m[k,targetRow] += factor * m[k,j]
next k
endsubroutine

subroutine normalizeRow(ref(m), i, j)
rem print "" + i + "/" + j
factor = 1 / m[i,j]
for k=0 to m[?,] - 1
m[k,j] *= factor
next k
endsubroutine

subroutine showMatrix(ref(m))
for j=0 to m[,?] - 1
print "( ";
for i=0 to m[?,] - 2
print format$(m[i,j]) + " ";
next i
print "| ";
print format$(m[m[?,]-1,j]) + " )"
next j
print
endsubroutine

function format$(x)
sign$ = " "
if x < 0 then
sign$ = "-"
x = -x
endif
beforePoint = int(x)
afterPoint = x - int(x)
r$ = right( "        " + sign$ + beforePoint , 4)
if afterPoint = 0 then
r$ += "     "
else
r$ += "."
r$ += right( left( "" + afterPoint + "      ", 6), 4)
endif
return r$
end function
